from random import randint
import copy
from io import BytesIO

from PIL import Image as ImageP
import numpy as np

import ui

from cpu import CPU

game_code = [
  0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0d, 0x06, 0x20, 0x2a, 0x06, 0x60,
  0xa9, 0x02, 0x85, 0x02, 0xa9, 0x04, 0x85, 0x03, 0xa9, 0x11, 0x85, 0x10, 0xa9,
  0x10, 0x85, 0x12, 0xa9, 0x0f, 0x85, 0x14, 0xa9, 0x04, 0x85, 0x11, 0x85, 0x13,
  0x85, 0x15, 0x60, 0xa5, 0xfe, 0x85, 0x00, 0xa5, 0xfe, 0x29, 0x03, 0x18, 0x69,
  0x02, 0x85, 0x01, 0x60, 0x20, 0x4d, 0x06, 0x20, 0x8d, 0x06, 0x20, 0xc3, 0x06,
  0x20, 0x19, 0x07, 0x20, 0x20, 0x07, 0x20, 0x2d, 0x07, 0x4c, 0x38, 0x06, 0xa5,
  0xff, 0xc9, 0x77, 0xf0, 0x0d, 0xc9, 0x64, 0xf0, 0x14, 0xc9, 0x73, 0xf0, 0x1b,
  0xc9, 0x61, 0xf0, 0x22, 0x60, 0xa9, 0x04, 0x24, 0x02, 0xd0, 0x26, 0xa9, 0x01,
  0x85, 0x02, 0x60, 0xa9, 0x08, 0x24, 0x02, 0xd0, 0x1b, 0xa9, 0x02, 0x85, 0x02,
  0x60, 0xa9, 0x01, 0x24, 0x02, 0xd0, 0x10, 0xa9, 0x04, 0x85, 0x02, 0x60, 0xa9,
  0x02, 0x24, 0x02, 0xd0, 0x05, 0xa9, 0x08, 0x85, 0x02, 0x60, 0x60, 0x20, 0x94,
  0x06, 0x20, 0xa8, 0x06, 0x60, 0xa5, 0x00, 0xc5, 0x10, 0xd0, 0x0d, 0xa5, 0x01,
  0xc5, 0x11, 0xd0, 0x07, 0xe6, 0x03, 0xe6, 0x03, 0x20, 0x2a, 0x06, 0x60, 0xa2,
  0x02, 0xb5, 0x10, 0xc5, 0x10, 0xd0, 0x06, 0xb5, 0x11, 0xc5, 0x11, 0xf0, 0x09,
  0xe8, 0xe8, 0xe4, 0x03, 0xf0, 0x06, 0x4c, 0xaa, 0x06, 0x4c, 0x35, 0x07, 0x60,
  0xa6, 0x03, 0xca, 0x8a, 0xb5, 0x10, 0x95, 0x12, 0xca, 0x10, 0xf9, 0xa5, 0x02,
  0x4a, 0xb0, 0x09, 0x4a, 0xb0, 0x19, 0x4a, 0xb0, 0x1f, 0x4a, 0xb0, 0x2f, 0xa5,
  0x10, 0x38, 0xe9, 0x20, 0x85, 0x10, 0x90, 0x01, 0x60, 0xc6, 0x11, 0xa9, 0x01,
  0xc5, 0x11, 0xf0, 0x28, 0x60, 0xe6, 0x10, 0xa9, 0x1f, 0x24, 0x10, 0xf0, 0x1f,
  0x60, 0xa5, 0x10, 0x18, 0x69, 0x20, 0x85, 0x10, 0xb0, 0x01, 0x60, 0xe6, 0x11,
  0xa9, 0x06, 0xc5, 0x11, 0xf0, 0x0c, 0x60, 0xc6, 0x10, 0xa5, 0x10, 0x29, 0x1f,
  0xc9, 0x1f, 0xf0, 0x01, 0x60, 0x4c, 0x35, 0x07, 0xa0, 0x00, 0xa5, 0xfe, 0x91,
  0x00, 0x60, 0xa6, 0x03, 0xa9, 0x00, 0x81, 0x10, 0xa2, 0x00, 0xa9, 0x01, 0x81,
  0x10, 0x60, 0xa2, 0x00, 0xea, 0xea, 0xca, 0xd0, 0xfb, 0x60
]


def color(byte: 'u8'):
  if byte == 0:  # 0 => BLACK
    #return 0, 0, 0
    return 0, 0, 0
  elif byte == 1:  # 1 => WHITE
    #return 1, 1, 1
    return 255, 255, 255
  elif byte in (2, 9):  # 2 | 9 => GREY
    #return .5, .5, .5
    return 128, 128, 128
  elif byte in (3, 10):  # 3 | 10 => RED
    #return 1, 0, 0
    return 255, 0, 0
  elif byte in (4, 11):  # 4 | 11 => GREEN
    #return 0, 1, 0
    return 0, 255, 0
  elif byte in (5, 12):  # 5 | 12 => BLUE
    #return 0, 0, 1
    return 0, 0, 255
  elif byte in (6, 13):  # 6 | 13 => MAGENTA
    #return 1, 0, 1
    return 255, 0, 255
  elif byte in (7, 14):  # 7 | 14 => YELLOW
    #return 1, 1, 0
    return 255, 255, 0
  else:  # _ => CYAN,
    #return 0, 1, 1
    return 0, 255, 255


def read_screen_state(_cpu: '&CPU', frame: '&mut [u8; 32 * 3 * 32]') -> bool:
  frame_idx = 0
  update = False
  for i in range(0x0200, 0x0600):
    #print(i)
    color_idx = _cpu.mem_read(i)
    #print(f'color_idx: {color_idx}')
    b1, b2, b3 = color(color_idx)
    if frame[frame_idx] != b1 or frame[frame_idx +
                                       1] != b2 or frame[frame_idx + 2] != b3:
      frame[frame_idx] = b1
      frame[frame_idx + 1] = b2
      frame[frame_idx + 2] = b3
      update = True
    frame_idx += 3

  return update


def handle_user_input(_cpu: CPU, event_pump: '&mut EventPump'):
  _cpu.mem_write(0xff, 0x77)


def randint_write():
  # fixme: 画像出てから
  cpu.mem_write(0xfe, randint(1, 16))
  #pass 


def set_img(py_array):
  #print(py_array)
  num_array = np.array(py_array, dtype=np.uint8)
  diff_array = num_array.reshape(32, 32, 3)

  out_array = base_array + diff_array
  #print(out_array)
  in_img = ImageP.fromarray(out_array)
  with BytesIO() as bIO:
    in_img.save(bIO, 'png')
    out_img = ui.Image.from_data(bIO.getvalue())
    del bIO
    return out_img


init_img = ImageP.new('RGB', (32, 32))
base_array = np.asarray(init_img)


class View(ui.View):
  def __init__(self):
    self.update_interval = 1 / 1
    # todo: numpy -> `reshape(32, 32, 3)`
    self.screen_state = [0] * (32 * 32 * 3)
    self.cpu = CPU()
    self.cpu.load(game_code)
    self.cpu.reset()
    self.im_view = ui.ImageView()
    self.im_view.height = 320
    self.im_view.width = 320
    self.add_subview(self.im_view)

  def update(self):
    # fixme: What is the order of callbacks?
    cpu = copy.copy(self.cpu)
    self.cpu = self.cpu.run_with_callback(cpu)

    handle_user_input(cpu, None)
    cpu.mem_write(0xfe, randint(1, 16))
    if read_screen_state(cpu, self.screen_state):
      self.im_view.image = set_img(self.screen_state)


if __name__ == '__main__':
  view = View()
  view.present()

  #screen_state = [0] * (32 * 3 * 32)
  #print(read_screen_state(cpu, screen_state))

  #

  pass


